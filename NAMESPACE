# Generated by roxygen2: do not edit by hand

S3method("dimnames<-",gpb.Dataset)
S3method(dim,gpb.Dataset)
S3method(dimnames,gpb.Dataset)
S3method(fit,GPModel)
S3method(get_aux_pars,GPModel)
S3method(get_coef,GPModel)
S3method(get_cov_pars,GPModel)
S3method(getinfo,gpb.Dataset)
S3method(neg_log_likelihood,GPModel)
S3method(predict,GPModel)
S3method(predict,gpb.Booster)
S3method(predict_training_data_random_effects,GPModel)
S3method(set_optim_params,GPModel)
S3method(set_prediction_data,GPModel)
S3method(setinfo,gpb.Dataset)
S3method(slice,gpb.Dataset)
S3method(summary,GPModel)
export(GPModel)
export(fit)
export(fitGPModel)
export(get_aux_pars)
export(get_coef)
export(get_cov_pars)
export(get_nested_categories)
export(getinfo)
export(gpb.Dataset)
export(gpb.Dataset.construct)
export(gpb.Dataset.create.valid)
export(gpb.Dataset.save)
export(gpb.Dataset.set.categorical)
export(gpb.Dataset.set.reference)
export(gpb.convert_with_rules)
export(gpb.cv)
export(gpb.dump)
export(gpb.get.eval.result)
export(gpb.grid.search.tune.parameters)
export(gpb.importance)
export(gpb.interprete)
export(gpb.load)
export(gpb.model.dt.tree)
export(gpb.plot.importance)
export(gpb.plot.interpretation)
export(gpb.plot.part.dep.interact)
export(gpb.plot.partial.dependence)
export(gpb.save)
export(gpb.train)
export(gpboost)
export(loadGPModel)
export(neg_log_likelihood)
export(predict_training_data_random_effects)
export(readRDS.gpb.Booster)
export(saveGPModel)
export(saveRDS.gpb.Booster)
export(set_optim_params)
export(set_prediction_data)
export(setinfo)
export(slice)
import(methods)
importFrom(Matrix,Matrix)
importFrom(R6,R6Class)
importFrom(RJSONIO,fromJSON)
importFrom(RJSONIO,toJSON)
importFrom(data.table,":=")
importFrom(data.table,as.data.table)
importFrom(data.table,data.table)
importFrom(data.table,rbindlist)
importFrom(data.table,set)
importFrom(data.table,setnames)
importFrom(data.table,setorder)
importFrom(data.table,setorderv)
importFrom(graphics,barplot)
importFrom(graphics,contour)
importFrom(graphics,filled.contour)
importFrom(graphics,par)
importFrom(methods,is)
importFrom(stats,quantile)
importFrom(utils,read.delim)
useDynLib(gpboost , .registration = TRUE)
